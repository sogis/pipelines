apiVersion: v1
kind: Template
metadata:
  name: ressources-qwc-service
  annotations:
    description: >-
      "Creates necessary ressources for qwc-service"
parameters:
  - description: Namespace
    name: NAMESPACE
  - description: GDI Environment
    name: ENVIRONMENT
  - description: URL for GDI Environment
    name: BASEURL
  - description: WMTS URL
    name: WMTS_URL
  - description: Matomo URL
    name: MATOMO_URL
  - description: Url with no SES
    name: NO_SES_URL
objects:
- apiVersion: v1
  data:
    nginx_base_os.conf: |
      #user  nginx;
      worker_processes  auto;
      
      error_log  /var/log/nginx/error.log warn;
      pid        /var/run/nginx.pid;
      
      
      events {
          worker_connections  1024;
      }
      
      
      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;
      
          log_format  main  '[$time_local] $http_hsp_client_addr "$http_x_forwarded_for" - $status "$request" - '
                            '$body_bytes_sent "$http_user_agent $remote_user'
                            'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time" $upstream_cache_status $upstream_addr';
      
          access_log  /var/log/nginx/access.log  main;
      
          sendfile        on;
          #tcp_nopush     on;
      
          keepalive_timeout  65;

          #gzip on;

          include /etc/nginx/conf.d/*.conf;
      }
  kind: ConfigMap
  metadata:
    name: nginx-base-config
    labels:
      service: api-gateway
      app: gdi
- apiVersion: v1
  data:
    nginx_os.conf: |
      server {
        listen 8081 ssl;
        server_name  localhost;
        ssl_certificate /etc/nginx/certs/tls.crt;
        ssl_certificate_key /etc/nginx/certs/tls.key;
        
        underscores_in_headers on;

        proxy_redirect     off;
        proxy_set_header   Host              $http_host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $http_hsp_client_addr;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_connect_timeout       1200;
        proxy_send_timeout          1200;
        proxy_read_timeout          1200;
        send_timeout                1200;

        proxy_buffer_size 512k;
        proxy_buffers 8 512k;
        proxy_busy_buffers_size 512k;
        proxy_temp_file_write_size 512k;
        client_max_body_size 50M;

        add_header 'Access-Control-Allow-Origin' '*';

        location /nginx_status {
            stub_status on;
            access_log  on;
        }


        #error_page  404   /404.html;
        #location = /404.html {
        #    root   /usr/share/nginx/html;
        #}

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /maintenance.html;
        error_page   500 502 503 504  /50x.html;
        #location = /maintenance.html {
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
      }
  kind: ConfigMap
  metadata:
    name: nginx-config
    labels:
      service: api-gateway
      app: gdi
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: api-gateway
    labels:
      app: gdi
      service: api-gateway
  spec:
    tags:
      - name: latest
        from:
          kind: DockerImage
          name: 'docker-registry.default.svc:5000/${NAMESPACE}/api-gateway:latest'
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: api-gateway-cert
    labels:
      app: gdi
      service: api-gateway
    name: api-gateway
  spec:
    ports:
    - name: 443-tcp
      port: 443
      protocol: TCP
      targetPort: 8081
    selector:
      service: api-gateway
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: gdi
      service: api-gateway
    name: api-gateway
  spec:
    host: ${BASEURL}
    port:
      targetPort: 443-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: reencrypt
    to:
      kind: Service
      name: api-gateway
      weight: 100
    wildcardPolicy: None
  status:
    ingress: null
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: gdi
      service: api-gateway
    annotations:
      openshift.io/long-description: >-
        "Route Necessary for Autologin check. Checks if user comes from intra- or internet. If user comes from intranet Single Sign On is used"
    name: api-gateway-ohne-ses
  spec:
    host: ${NO_SES_URL}.apps.ocp.so.ch
    port:
      targetPort: 443-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: reencrypt
    to:
      kind: Service
      name: api-gateway
      weight: 100
    wildcardPolicy: None
