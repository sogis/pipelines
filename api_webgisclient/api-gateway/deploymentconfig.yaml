apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: api-gateway
  annotations:
    description: "Creates deploymentConfig for api-gateway"
labels:
  application: gdi
parameters:
  - description: Openshift Namespace
    name: NAMESPACE
  - description: ImageStream Tag
    name: TAG
  - description: Environment
    name: ENVIRONMENT
  - description: Number of Replicas
    name: REPLICAS
  - description: cpu request
    name: CPU_REQUEST
  - description: cpu limit
    name: CPU_LIMIT
  - description: Memory Request
    name: MEMORY_REQUEST
  - description: Memory Limit
    name: MEMORY_LIMIT
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      kompose.cmd: kompose --file docker-compose-4openshift.yml --provider openshift
        convert
      kompose.version: 1.10.0 (8bb0907)
    generation: 1
    labels:
      service: api-gateway
      app: gdi
    name: api-gateway
  spec:
    replicas: ${{REPLICAS}}
    revisionHistoryLimit: 1
    selector:
      service: api-gateway
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 10%
        maxUnavailable: 10%
        timeoutSeconds: 120
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          service: api-gateway
          app: gdi
      spec:
        containers:
        - image: image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/api-gateway:${TAG}
          imagePullPolicy: Always
          name: sogis-api-gateway
          ports:
          - containerPort: 8081
            protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /nginx_status
              port: 8081
              scheme: HTTPS
            initialDelaySeconds: 1
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /nginx_status
              port: 8081
              scheme: HTTPS
            initialDelaySeconds: 1
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /etc/nginx/conf.d
            name: nginx-config-claim
          - mountPath: /etc/nginx/nginx.conf
            name: nginx-config-base-claim
            subPath: nginx.conf
          - mountPath: /geodata
            name: datensogispicmir
          - mountPath: /etc/nginx/certs
            name: nginx-cert-volume
          - mountPath: /cache
            name: cache-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext:
          runAsUser: 1000820001
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: nginx_os.conf
              path: nginx.conf
            name: nginx-config
          name: nginx-config-claim
        - configMap:
            items:
            - key: nginx_base_os.conf
              path: nginx.conf
            name: nginx-base-config
          name: nginx-config-base-claim
        - name: nginx-cert-volume
          secret:
            defaultMode: 420
            secretName: api-gateway-cert
        - name: datensogispicmir
          persistentVolumeClaim:
            claimName: datensogispicmir-claim${ENVIRONMENT}
            readOnly: true
        - name: cache-volume
          emptyDir: {}
    test: false
    triggers: []
