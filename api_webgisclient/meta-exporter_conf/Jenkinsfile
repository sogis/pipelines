// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
pipeline {
    agent { label 'master' }
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 10, unit: 'MINUTES')
        }
    parameters {
        string(defaultValue: "master",
               description: 'Bitte Branch auswählen, der für die Pipeline verwendet werden soll',
               name: 'branch'
               )
        string(defaultValue: "agi-apps-test",
               description: 'Bitte namespace auswählen',
               name: 'namespace'
               )
        }

    stages {
        stage ('Prerequesits') {
            steps {
                script {
                    namespace = params.namespace
                    if ( namespace == 'agi-apps-test' ) {
                        dbserver = env.DB_SERVER_TEST
                        }
                    else if ( namespace == 'agi-apps-integration' ) {
                        dbserver = env.DB_SERVER_INT
                        }
                    else if ( namespace == 'agi-apps-production' ) {
                        dbserver = env.DB_SERVER_PROD
                        }
                    else {
                        dbserver = env.DB_SERVER_TEST
                        }
                    credentials = [ 
                        usernamePassword(credentialsId: (env.NAMESPACE_JENKINS) + '-jenkins-dbuser-simi-secret'   , usernameVariable: 'DbUserSimi'   , passwordVariable: 'PwdSimi')
                        ]
                    }
                }
            }
        stage ('Create Datensuche XML File') {
            steps {
                withCredentials ( credentials ) {
                    script {
                        sh """
                            if [ -d "meta_exporter" ]; then
                              rm -rf meta_exporter/* rm -rf meta_exporter/.git
                            fi
        
                            if [ ! -d  "config/default" ]; then
                              mkdir -p config/default
                            fi

                            # if not exists get the meta2file-cli-all.jar and set the necessary permissions
                            if [ ! -f "meta2file-cli-1.0.63-all.jar" ]; then
                              wget https://github.com/sogis/meta2file/releases/download/v1.0.63/meta2file-cli-1.0.63-all.jar
                              chmod u+x meta2file-cli-1.0.63-all.jar
                            fi
                            
                            # meta2file command to create the conf files
                            java -jar meta2file-cli-1.0.63-all.jar -c jdbc:postgresql://${dbserver}/${env.SIMI_DB} -u ${DbUserSimi} -p ${PwdSimi} -d $env.WORKSPACE/api_webgisclient/meta-exporter_conf/datasearch.xml
                        """ 
                        archiveArtifacts artifacts: 'meta-exporter_conf/datasearch.xml', onlyIfSuccessful: true, allowEmptyArchive: true
                        input(message: 'Please validate, this job will automatically ABORTED after 30 minutes even if no user input provided', ok: 'Proceed')
                        }
                    }
                }
            }
          stage ('Build extended Image' ) {
              steps {
                  script {
                      sh """ 
                          oc process -f $env.WORKSPACE/api_webgisclient/meta-exporter_conf/resources.yaml -p NAMESPACE=${namespace} | oc apply -n ${namespace} -f-
                          oc process -f $env.WORKSPACE/api_webgisclient/meta-exporter_conf/buildconfig.yaml -p BASETAG=0.0.114 -p DEPLOYTAG=latest | oc apply -n ${namespace} -f-
                          oc start-build sodata-extended-image -n ${namespace} --from-dir $env.WORKSPACE/api_webgisclient/meta-exporter_conf --wait
                          rm -rf $env.WORKSPACE/config
                      """
                      }
                  }
              }
          stage ( 'Deploy Image' ) {
              steps {
                  sh """
                      oc rollout latest -n $namespace sodata
                      oc rollout status -n $namespace dc sodata
                  """
                  }
              }
        }
    post {
        // Clean after build
        cleanup {
            sh """
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@script
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@libs
                rm -rf $WORKSPACE/*
            """
            }
        }
    }
