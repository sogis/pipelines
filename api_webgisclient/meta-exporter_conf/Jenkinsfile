def serviceName = 'meta-exporter_conf'
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
library identifier: "jenkins-shared-libs@${JENKINS_SHARED_LIBS_BRANCH}", retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])

pipeline {
    agent { label 'master' }
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 35, unit: 'MINUTES')
        }
    parameters {
        string(defaultValue: "master",
               description: 'Bitte Branch auswählen, der für die Pipeline verwendet werden soll',
               name: 'branch'
               )
        string(defaultValue: "agi-apps-test",
               description: 'Bitte namespace auswählen',
               name: 'namespace'
               )
        }

    stages {
        stage ('Ask for Version') {
            steps {
                script {
                    repo = 'https://raw.githubusercontent.com/sogis/pipelines/' + params.branch + '/api_webgisclient/' + serviceName + '/deployment'
                    namespace = params.namespace
                    buildNumber = BUILD_NUMBER
                    jobName = JOB_NAME
                    if ( namespace == 'agi-apps-test' ) {
                        dbserver = env.DB_SERVER_TEST
                        }
                    else if ( namespace == 'agi-apps-integration' ) {
                        dbserver = env.DB_SERVER_INT
                        }
                    else if ( namespace == 'agi-apps-production' ) {
                        dbserver = env.DB_SERVER_PROD
                        }
                    else {
                        dbserver = env.DB_SERVER_TEST
                        }
                    credentials = [ 
                        usernamePassword(credentialsId: (env.NAMESPACE_JENKINS) + '-jenkins-dbuser-simi-secret'   , usernameVariable: 'DbUserSimi'   , passwordVariable: 'PwdSimi')
                        ]
                    }
                }
            }
        stage ('Create Datensuche XML File') {
            steps {
                withCredentials ( credentials ) {
                    script {
                        sh """
                            if [ -d "meta_exporter" ]; then
                              rm -rf meta_exporter/* rm -rf meta_exporter/.git
                            fi
        
                            if [ ! -d  "config/default" ]; then
                              mkdir -p config/default
                            fi

                            # if not exists get the meta2file-cli-all.jar and set the necessary permissions
                            if [ ! -f "meta2file-cli-1.0.63-all.jar" ]; then
                              wget https://github.com/sogis/meta2file/releases/download/v1.0.63/meta2file-cli-1.0.63-all.jar
                              chmod u+x meta2file-cli-1.0.63-all.jar
                            fi
                            
                            # meta2file command to create the conf files
                            java -jar meta2file-cli-1.0.63-all.jar -c jdbc:postgresql://${dbserver}/${env.SIMI_DB} -u ${DbUserSimi} -p ${PwdSimi} -d $env.WORKSPACE/conf/datasearch.xml
                        """ 
                        PODNAME= sh([script: 'oc get pods -o custom-columns=POD:.metadata.name --no-headers -n ${namespace} | grep sodata | grep -v -E -m 1 "preview|build|deploy"', returnStdout: true]).trim()
                        input(message: 'Please validate, this job will automatically ABORTED after 30 minutes even if no user input provided', ok: 'Proceed')
                        sh """ 
                            if [ -d "openshift-templates" ]; then
                              rm -rf openshift-templates/* rm -rf openshift-templates/.git
                            fi
                            git clone -b master https://github.com/sogis/openshift-templates.git
                        """
                        dir("openshift-templates/sodata") {
                            sh """
                               git config user.email agi.info@bd.so.ch
                               git config user.name agiuser
                               git status
                               cp $env.WORKSPACE/conf/datasearch.xml .
                               git add datasearch.xml
                               git commit -m '[sodata] update datasearch.xml'
                               git push 
                            """
                        }
                        archiveArtifacts artifacts: 'config/**', onlyIfSuccessful: true, allowEmptyArchive: true
                        sh """ 
                            rm -rf $env.WORKSPACE/config
                        """
                        }
                    }
                }
            }
        }
    post {
        // Clean after build
        cleanup {
            sh """
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@script
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@libs
                rm -rf $WORKSPACE/*
            """
            }
        }
    }
