library identifier: "jenkins-shared-libs@${JENKINS_SHARED_LIBS_BRANCH}", retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])
properties([
     parameters([
         [$class: 'ChoiceParameter',
          choiceType: 'PT_SINGLE_SELECT',
          description: 'Bitte namespace auswählen',
          name: 'namespace',
          script: [$class: 'GroovyScript',
                   script: [classpath: [],
                            sandbox: false,
                            script: '''
import hudson.model.*
import jenkins.model.*
def returnValue = [];
if (User.current()) {
  def userid = User.current().id
  def auths = Jenkins.instance.securityRealm.loadUserByUsername(userid).authorities.collect{a -> a.authority}
  
  if("sogis-adm" in auths) {
          returnValue = ["gdi-production", "gdi-integration:selected", "gdi-test"]
     }
  else {
      returnValue = ["gdi-integration:selected", "gdi-test"]
     }
}
else {
  returnValue = ["gdi-integration:selected", "gdi-test"]
}
return returnValue'''
                            ]
                   ]
         ],
         string(defaultValue: '1',
                name: 'replicas',
                description: 'Anzahl der Replicas'
               ),
         [$class: 'ChoiceParameter',
          choiceType: 'PT_SINGLE_SELECT',
          description: 'Bitte Branch auswählen, der für die Pipeline verwendet werden soll',
          name: 'branch',
          script: [$class: 'GroovyScript',
                   script: [classpath: [],
                            sandbox: false,
                            script: '''
import hudson.model.*
import jenkins.model.*
def returnValue = [];
if (User.current()) {
  def userid = User.current().id
  def auths = Jenkins.instance.securityRealm.loadUserByUsername(userid).authorities.collect{a -> a.authority}
  if("sogis-adm" in auths || userid == "bjsvwjek") {
          def gitURL = "https://github.com/sogis/pipelines.git"
          def command = "git ls-remote -h $gitURL"
  
          def proc = command.execute()
          proc.waitFor()
  
          def branches = proc.in.text.readLines().collect {
              branch = it.replaceAll(/[a-z0-9]*\\trefs\\/heads\\//, '')
              if (branch == "master") {
                  selectBranches = branch + ":selected"
              }
              else {
                  selectBranches = branch
              }
          }
          returnValue=branches
     }
  else {
      returnValue = ["master:selected"]
     }   
}
else {
  returnValue = ["master:selected"]
}
return returnValue'''
                            ]
                   ]
         ],
         choice(choices: ['Datasets/Dataproducts', 'Permissions', 'Nur Darstellung', 'Templates', 'Alles'],
                name: 'AuswahlRollout',
                description: 'Was soll ausgerollt werden?'
               )
         ])
    ])
pipeline {
    agent { label 'master' } 
    options {
        // set a timeout of 15 minutes for this pipeline
        timeout(time: 35, unit: 'MINUTES')
        // disableConcurrentBuilds()
    }
    stages {
        stage('Stop Old Build') {
            steps {
                milestone label: '', ordinal:  Integer.parseInt(env.BUILD_ID) - 1
                milestone label: '', ordinal:  Integer.parseInt(env.BUILD_ID)
                }
            }
        stage ('Ask for Version') {
            steps {
                script {
                    namespace = params.namespace
                    AuswahlRollout = params.AuswahlRollout
                    replicas = params.replicas
                    branch = params.branch
                    if ( namespace == 'gdi-test' ) {
                        solrEnv = 'test'
                        }
                    else if ( namespace == 'gdi-integration' ) {
                        solrEnv = 'integration'
                        }
                    else if ( namespace == 'gdi-production' ) {
                        solrEnv = 'production'
                        }
                    else {
                        solrEnv = 'test'
                        }
                    }
                }
            }
        stage('update Solr Metadaten') {
            steps {
                script {
                    url = "http://indexupdater-${solrEnv}.apps.ocp.so.ch/queue?ds=foreground,background"
                    response = sh(script: "curl -X POST \"$url\" -d \"dih=solr/gdi/dih_metadata\"", returnStdout: true).trim()
                    echo response
                    }
                }
            }
        stage('get requirements') {
            steps {
                script {    
                    serviceMap = [:]
                    workDir = "$WORKSPACE/api_webgisclient"
                    dir (workDir) {
                        def req = readFile(file: 'requirements.txt')
                        def services = req.split('\n')
                        services.each { item ->
                            serviceNameBaseImage = item.split(':')[0]+'-baseImage'
                            serviceVersionBaseImage = item.split(':')[1]
                            serviceNameDeployImage = item.split(':')[0]+'-deployImage' 
                            serviceVersionDeployImage = item.split(':')[2]
                            serviceMap.put((serviceNameBaseImage), (serviceVersionBaseImage))
                            serviceMap.put((serviceNameDeployImage), (serviceVersionDeployImage))
                            }
                        }
                    }
                }
            }
        stage('Update permissions') {
            when {
                expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' }
                }
            steps {
                build job: 'gdi/permission', parameters: [ string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'deploy', value: true), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true
                }
            }
        stage('Deploy Services') {
            parallel {
                 stage ('Deploy ccc-service') {
                    when {
                        expression { AuswahlRollout == 'Alles' }
                    }
                    steps {
                        build job: 'gdi/ccc-config-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-ccc-config-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-ccc-config-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}") ], wait: true, propagate: true
                        }
                    }
                 stage ('Deploy auth-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' }
                    }
                    steps {
                        build job: 'gdi/auth-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-auth-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-auth-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}") ], wait: true, propagate: true
                        }
                    }
                 stage ('Deploy qwc-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' }
                    }
                    steps {
                        build job: 'gdi/qwc-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-map-viewer-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-map-viewer-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy qgis-server') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' || AuswahlRollout == 'Nur Darstellung' }
                    }
                    steps {
                        build job: 'gdi/qgis-server', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-qgis-server-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-qgis-server-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy data-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' }
                    }
                    steps {
                        build job: 'gdi/data-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-data-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-data-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true
                        }
                    }
                stage ('Deploy dataproduct-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' }
                    }
                    steps {
                        build job: 'gdi/dataproduct-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-dataproduct-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-dataproduct-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy document-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Templates' }
                    }
                    steps {
                        build job: 'gdi/document-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-document-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-document-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy elevation-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' }
                    }
                    steps {
                        build job: 'gdi/elevation-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-elevation-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-elevation-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy featureinfo-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' }
                    }
                    steps {
                        build job: 'gdi/featureinfo-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-feature-info-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-feature-info-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    } 
                stage ('Deploy jasper-reporting-service') {
                    when {
                        expression { AuswahlRollout == 'Alles' }
                    }
                    steps {
                        build job: 'gdi/jasper-reporting-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['jasper-reporting-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['jasper-reporting-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy landreg-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' }
                    }
                    steps {
                        build job: 'gdi/landreg-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-landreg-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-landreg-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy legend-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' }
                    }
                    steps {
                        build job: 'gdi/legend-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-legend-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-legend-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy mapinfo-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' }
                    }
                    steps {
                        build job: 'gdi/mapinfo-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-mapinfo-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-mapinfo-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy ogc-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' }
                    }
                    steps {
                        build job: 'gdi/ogc-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-ogc-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-ogc-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy permalink-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' }
                    }
                    steps {
                        build job: 'gdi/permalink-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-permalink-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-permalink-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy plotinfo-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' }
                    }
                    steps {
                        build job: 'gdi/plotinfo-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-plotinfo-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-plotinfo-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy print-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' }
                    }
                    steps {
                        build job: 'gdi/print-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-print-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-print-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy search-service') {
                    when {
                        expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' }
                    }
                    steps {
                        build job: 'gdi/search-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-fulltext-search-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-fulltext-search-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                } 
            }
        stage ('Deploy qgis-server-featureinfo') {
            when {
                expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' }
            }
            steps {
                build job: 'gdi/qgis-server-featureinfo', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-qgis-server-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-qgis-server-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                }
            }
        stage ('Deploy qgis-server-print') {
            when {
                expression { AuswahlRollout == 'Permissions' || AuswahlRollout == 'Alles' || AuswahlRollout == 'Datasets/Dataproducts' }
            }
            steps {
                build job: 'gdi/qgis-server-print', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-qgis-server-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-qgis-server-baseImage']}"), string(name: 'namespace', value: "${namespace}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                }
            }
        }
    post {
        // Clean after build
        cleanup {
            sh """
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@script 
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@libs 
                rm -rf $WORKSPACE/*
            """
            }
        }
    }
