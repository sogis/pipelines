def serviceName = 'qgis-server-daily'
def configFileName = 'somap.json'
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
library identifier: "jenkins-shared-libs@${JENKINS_SHARED_LIBS_BRANCH}", retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])

pipeline {
    agent { label 'master' }
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 35, unit: 'MINUTES')
        }
    parameters {
        string(defaultValue: '2.0.17',
               description: 'Image Version',
               name: 'vBaseImage'
               )
        string(defaultValue: "master",
               description: 'Bitte Branch ausw채hlen, der f체r die Pipeline verwendet werden soll',
               name: 'branch'
               )
        string(defaultValue: "gdi-production",
               description: 'Bitte namespace ausw채hlen',
               name: 'namespace'
               )
        }

    stages {
        stage ('Ask for Version') {
            steps {
                script {
                    repo = 'https://raw.githubusercontent.com/sogis/pipelines/' + params.branch + '/api_webgisclient/' + serviceName + '/deployment'
                    vBaseImage = params.vBaseImage
                    namespace = params.namespace
                    if ( namespace == 'gdi-test' ) { 
                      db_server = env.DB_SERVER_TEST
                      environment = 'test'
                      sogisPicMirEnv = '-test'
                      replicas = '1'
                      replicas_print = '1'
                      replicas_featureinfo = '1'
                      resources = ['cpu_request': '0', 'cpu_limit': '0', 'memory_request': '0', 'memory_limit': '0']
                      }
                    else if ( namespace == 'gdi-integration' ) { 
                      db_server = env.DB_SERVER_INT
                      environment = 'integration'
                      sogisPicMirEnv = '-int'
                      replicas = '1'
                      replicas_print = '2'
                      replicas_featureinfo = '1'
                      resources = ['cpu_request': '1000m', 'cpu_limit': '4000m', 'memory_request': '4096Mi', 'memory_limit': '8192Mi']
                      }
                    else if ( namespace == 'gdi-production' ) { 
                      db_server = env.DB_SERVER_PROD
                      environment = 'production'
                      sogisPicMirEnv = '-prod'
                      replicas = '6'
                      replicas_print = '3'
                      replicas_featureinfo = '2'
                      resources = ['cpu_request': '2000m', 'cpu_limit': '4000m', 'memory_request': '8192Mi', 'memory_limit': '16384Mi']
                      }
                    else {
                      environment = 'test'
                      sogisPicMirEnv = '-test'
                      replicas = '2'
                      replicas_print = '1'
                      replicas_featureinfo = '1'
                      resources = ['cpu_request': '0', 'cpu_limit': '0', 'memory_request': '0', 'memory_limit': '0']
                      }
                    buildNumber = BUILD_NUMBER
                    jobName = JOB_NAME
                    }
                }
            }
        stage ('Deploy qgis-server') {
            steps {
                deployImage 'qgis-server', namespace, vBaseImage, repo, replicas, resources['cpu_request'], resources['cpu_limit'], resources['memory_request'], resources['memory_limit'], "-p ENVIRONMENT=${sogisPicMirEnv}"
                }
            }
        }
    post {
        unsuccessful {
            emailext (
                to: '${DEFAULT_RECIPIENTS}',
                subject: "QGIS Server Daily Pipeline ist fehlgeschlagen",
                body: "Die Ausf체hrung der QGIS Server Daily Pipeline war nicht erfolgreich. Details dazu finden Sie in den Log-Meldungen unter ${RUN_DISPLAY_URL}."
            )
        }
        // Clean after build
        cleanup {
            sh """
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@script
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@libs
                rm -rf $WORKSPACE/*
            """
            }
        }
    }
