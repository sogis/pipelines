def serviceName = 'ccc-service'
def repo = 'https://raw.githubusercontent.com/sogis/pipelines/master/api_webgisclient/' + serviceName
def configFileName = 'cccConfig.json'
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
credentials = [
    usernamePassword(credentialsId: 'agi-apps-test-pw-ogc-server'          , usernameVariable: 'DbUserOgcServer'         , passwordVariable: 'PwdOgcServer'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-sogis-service'       , usernameVariable: 'DbUserSogisService'      , passwordVariable: 'PwdSogisService'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-sogis-service-write' , usernameVariable: 'DbUserSogisServiceWrite' , passwordVariable: 'PwdSogisServiceWrite'),
    usernamePassword(credentialsId: 'jenkins-api'                          , usernameVariable: 'apiUser'                 , passwordVariable: 'PwdApiUser')
]
library identifier: 'jenkins-shared-libs@master', retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])

pipeline {
    agent { label 'master' } 
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 10, unit: 'MINUTES')
        }
    parameters {
        string(defaultValue: "v2.0.8",
               description: 'Bitte Basis Image Version auswählen',
               name: 'vBaseImage'
               )
        string(description: 'Bitte Tag des generierten bzw. deployten Images angeben',
               name: 'vDeployImage'
               )
        string(defaultValue: "gdi-test",
               description: 'Bitte namespace auswählen',
               name: 'namespace'
               )
        choice(choices: ['ja','nein'],
               description: 'Soll das Image gebaut werden?',
               name: 'build'     
               )
        }

    stages {
        stage ('Ask for Version') {
            steps {
                script {
                    vBaseImage = params.vBaseImage
                    vDeployImage = params.vDeployImage
                    build = params.build
                    namespace = params.namespace
                    if ( namespace == 'gdi-test' ) { 
                      baseUrl = 'geo-t.so.ch'
                      }
                    else if ( namespace == 'gdi-integration' ) { 
                      baseUrl = 'geo-i.so.ch'
                      }
                    else if ( namespace == 'gdi' ) { 
                      baseUrl = 'geo.so.ch'
                      }
                    else {
                      baseUrl = 'geo-t.so.ch'
                      }
                    if (params.config) {
                        buildNumber = params.buildNumber
                        jobName = params.jobName
                        }
                    else {
                        buildNumber = BUILD_NUMBER
                        jobName = JOB_NAME
                        }
                    }
                }
            }
        stage ('Configure Ressources') {
            steps {
                withCredentials ( credentials ) {
                    configureRessources '${namespace}', "-f ${repo}/resources.yaml -p NAMESPACE=${namespace}"
                    }
                }
            }
        stage ('Create configs') {
            when {
               expression {
                   (params.configs != true)
                   }
               }
            agent { label 'python-slave' }
            steps {
                createConfigs([:])
                }
            }
        stage ('Build new Image for ccc-config-service if necessary') {
            when {
                expression {
                    (build == 'ja')
                    }
                }
            steps {
                withCredentials ( credentials ) {
                    buildImage serviceName, repo, namespace, "-p BASETAG=${vBaseImage} -p DEPLOYTAG=${vDeployImage}", configFileName, jobName, buildNumber, ""
                    }
                }
            }
        stage ('Deploy ccc-config-service in Test env') {
            steps {
                deployImage serviceName, namespace, vDeployImage, repo, "-p BASEURL=${baseUrl}"
                }
            }
        }
    }
