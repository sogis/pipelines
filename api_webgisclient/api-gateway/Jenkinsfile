def serviceName = 'api-gateway'
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
library identifier: 'jenkins-shared-libs@(env.JENKINS_SHARED_LIBS_BRANCH)', retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])

pipeline {
    agent any 
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 10, unit: 'MINUTES')
        }
    parameters {
        string(description: 'Bitte Tag des generierten bzw. deployten Images angeben',
               name: 'vDeployImage'
               )
        string(defaultValue: "gdi-test",
               description: 'Bitte Namespace auswählen',
               name: 'namespace'
               )
        string(defaultValue: "master",
               description: 'Bitte Branch auswählen, der für die Pipeline verwendet werden soll',
               name: 'branch'
               )
        string(defaultValue: "1",
               description: 'Anzahl Replicas',
               name: 'replicas'
               )
        choice(choices: ['ja','nein'],
               description: 'Soll das Image gebaut werden?',
               name: 'build'     
               )
        }

    stages {
        stage ('Ask for Version') {
            steps {
                script {
                    repo = 'https://raw.githubusercontent.com/sogis/pipelines/' + params.branch + '/api_webgisclient/' + serviceName
                    vDeployImage = params.vDeployImage
                    build = params.build
                    namespace = params.namespace
                    replicas = params.replicas
                    if ( namespace == 'gdi-test' ) {
                      environment = 'test'
                      baseUrl = 'geo-t.so.ch'
                      wmtsUrl = 'mapcache.agi-mapcache-test.svc'
                      matomoUrl = 'analytics-i.dev.so.ch'
                      resources = ['cpu_request': '0', 'cpu_limit': '0', 'memory_request': '0', 'memory_limit': '0']
                      }
                    else if ( namespace == 'gdi-integration' ) {
                      environment = 'integration'
                      baseUrl = 'geo-i.so.ch'
                      wmtsUrl = 'geo-wmts.so.ch'
                      matomoUrl = 'analytics-i.dev.so.ch'
                      resources = ['cpu_request': '50m', 'cpu_limit': '100m', 'memory_request': '80Mi', 'memory_limit': '150Mi']
                      }
                    else if ( namespace == 'gdi' ) {
                      environment = 'production'
                      baseUrl = 'geo.so.ch'
                      wmtsUrl = 'mapcache.agi-mapcache-production.svc'
                      matomoUrl = 'analytics.dev.so.ch'
                      resources = ['cpu_request': '100m', 'cpu_limit': '100m', 'memory_request': '150Mi', 'memory_limit': '150Mi']
                      }
                    else {
                      environment = 'test'
                      baseUrl = 'geo-t.so.ch'
                      wmtsUrl = 'mapcache.agi-mapcache-test.svc'
                      matomoUrl = 'analytics-i.dev.so.ch'
                      resources = ['cpu_request': '250', 'cpu_limit': '1500', 'memory_request': '200', 'memory_limit': '400']
                      }
                   }
                }
            }
        stage ('Configure Ressources') {
            steps {
                configureRessources '${namespace}', "-f ${repo}/resources.yaml -p ENVIRONMENT=${environment} -p BASEURL=${baseUrl} -p WMTS_URL=${wmtsUrl} -p NAMESPACE=${namespace} -p MATOMO_URL=${matomoUrl}"
                }
            }
        stage ('Build new Image for api-gateway if necessary') {
            when {
                expression {
                    (build == 'ja')
                    }
                }
            steps {
                script {
                    sh """   
                       oc process -f $repo/buildconfig.yaml -p DEPLOYTAG=$vDeployImage | oc apply -n $namespace -f- 
                       oc start-build $serviceName -n $namespace --wait
                    """
                    }
                }
            }
        stage ('Deploy api-gateway in Test env') {
            steps {
                deployImage serviceName, namespace, vDeployImage, repo, replicas, resources['cpu_request'],resources['cpu_limit'],resources['memory_request'],resources['memory_limit'],"-p ENVIRONMENT=${environment}"  
                }
            }
        }
    }
