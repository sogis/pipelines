apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: dataproduct-service
  annotations:
    description: "Creates deploymentConfig for dataproduct-service"
parameters:
  - description: Openshift Namespace
    name: NAMESPACE
  - description: Base Url of consumed services
    name: BASEURL
  - description: ImageStream Tag
    name: TAG
  - description: Number of Replicas
    name: REPLICAS
  - description: cpu request
    name: CPU_REQUEST
  - description: cpu limit
    name: CPU_LIMIT
  - description: Memory Request
    name: MEMORY_REQUEST
  - description: Memory Limit
    name: MEMORY_LIMIT
labels:
  application: gdi
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose-k8s.yml
      kompose.version: 1.16.0 (0c01309)
    labels:
      service: dataproduct-service
      app: gdi
    name: dataproduct-service
  spec:
    replicas: ${{REPLICAS}}
    selector:
      service: dataproduct-service
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 10%
        maxUnavailable: 10%
        timeoutSeconds: 120
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          service: dataproduct-service
          app: gdi
      spec:
        containers:
        - env:
          - name: ALLOW_BASIC_AUTH_USER
            value: "True"
          - name: JWT_SECRET_KEY
            value: fce9dd0cc67ae26c7b2fb912e31a4657e99014e50ccb90bd
          - name: SERVICE_MOUNTPOINT
            value: /api/dataproduct/v1
          - name: CONFIG_PATH
            value: /srv/qwc_service/config
          - name: WMS_SERVICE_URL
            value: https://${BASEURL}/api/wms
          - name: QGS_RESOURCES_DIR
            value: /qgs-resources
          image: sourcepole/sogis-dataproduct-service:${TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: healthz
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: sogis-dataproduct-service
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
          volumeMounts:
            - mountPath: /usr/etc/postgresql
              name: wsgi-service-config-claim
            - mountPath: /qgs-resources
              name: qgs-resources
            - mountPath: /srv/qwc_service/config
              name: qgs-resources
              subPath: config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationPeriodSeconds: 30
        volumes:
          - secret:
              items:
              - key: pg_service.conf
                path: pg_service.conf
              secretName: wsgi-service-pg-config
            name: wsgi-service-config-claim
          - name: qgs-resources
            persistentVolumeClaim:
              claimName: qgs-resources-claim
    triggers: []
