def serviceName = 'jasper-reporting-service'
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.

library identifier: "jenkins-shared-libs@${JENKINS_SHARED_LIBS_BRANCH}", retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])

pipeline {
    agent { label 'master' } 
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 10, unit: 'MINUTES')
        }
    parameters {
        string(defaultValue: "v2.0.8",
               description: 'Basis Image Version',
               name: 'vBaseImage' 
               )
        string(defaultValue: "master",
               description: 'Bitte Branch auswählen, der für die Pipeline verwendet werden soll',
               name: 'branch'
               )
        string(description: 'Anzahl der Replicas',
               defaultValue: '1',
               name: 'replicas'
               )
        string(defaultValue: "gdi-test",
               description: 'Bitte namespace auswählen',
               name: 'namespace'
               )
        }

    stages {
        stage ('Ask for Version') {
            steps {
                script {
                    repo = 'https://raw.githubusercontent.com/sogis/pipelines/' + params.branch + '/api_webgisclient/' + serviceName + '/deployment'
                    vBaseImage = params.vBaseImage
                    replicas = params.replicas
                    branch = params.branch
                    namespace = params.namespace
                    if ( namespace == 'gdi-test' ) { 
                      db_server = env.DB_SERVER_TEST
                      geo_db_server = env.GEO_DB_SERVER_TEST
                      resources = ['cpu_request': '0', 'cpu_limit': '0', 'memory_request': '0', 'memory_limit': '0']
                      }
                    else if ( namespace == 'gdi-integration' ) { 
                      db_server = env.DB_SERVER_INT
                      geo_db_server = env.GEO_DB_SERVER_TEST
                      resources = ['cpu_request': '500m', 'cpu_limit': '1500m', 'memory_request': '1000Mi', 'memory_limit': '2000Mi']
                      }
                    else if ( namespace == 'gdi-production' ) { 
                      db_server = env.DB_SERVER_PROD
                      geo_db_server = env.GEO_DB_SERVER_PROD
                      resources = ['cpu_request': '500m', 'cpu_limit': '1500m', 'memory_request': '2000Mi', 'memory_limit': '2000Mi']
                      }
                    else {
                      resources = ['cpu_request': '0', 'cpu_limit': '0', 'memory_request': '0', 'memory_limit': '0']
                      }
                    credentials = [
                        usernamePassword(credentialsId: (env.NAMESPACE_JENKINS) + '-jenkins-sogis-db-mswrite-secret', usernameVariable: 'DbUserMswrite'           , passwordVariable: 'PwdMswrite'),
                        usernamePassword(credentialsId: (env.NAMESPACE_JENKINS) + '-pw-report-server'       , usernameVariable: 'DbUserReportServer'      , passwordVariable: 'PwdReportServer'),
                        usernamePassword(credentialsId: (env.NAMESPACE_JENKINS) + '-pw-sogis-service'       , usernameVariable: 'DbUserSogisService'      , passwordVariable: 'PwdSogisService'),        
                        usernamePassword(credentialsId: (env.NAMESPACE_JENKINS) + '-jenkins-imdas-db-secret'       , usernameVariable: 'DbUserImdasDb'           , passwordVariable: 'PwdImdasUser'),
                        ]
                    }
                }
            }
        stage ('Configure Ressources') {
            steps {
                withCredentials ( credentials ) {
                    configureRessources '${namespace}', "-f ${repo}/resources.yaml -p DB_SERVER=${db_server} -p GEO_DB_SERVER=${geo_db_server} -p IMDAS_DB_SERVER=srsofaioi18943.verw.rootso.org -p DB_PUB=${env.PUB_DB} -p DB_EDIT=${env.EDIT_DB} -p DB_CONFIG=${env.CONFIG_DB} -p DB_SOGIS=${env.SOGIS_DB} -p DB_IMDAS=${env.IMDAS_DB} -p USER_SOGIS_SERVICE=${DbUserSogisService} -p PW_SOGIS_SERVICE=${PwdSogisService} -p USER_REPORT_SERVER=${DbUserReportServer} -p PW_REPORT_SERVER=${PwdReportServer} -p USER_MSWRITE=${DbUserMswrite} -p PW_MSWRITE=${PwdMswrite} -p USER_IMDAS_DB=${DbUserImdasDb} -p PW_IMDAS_DB_USER=${PwdImdasUser} -p NAMESPACE=${namespace}"
                    }
                }
             }
        stage ( 'Deploy jasper-reporting-service' ) {
            steps {
                deployImage serviceName, namespace, vBaseImage, repo, replicas, resources['cpu_request'], resources['cpu_limit'], resources['memory_request'], resources['memory_limit']
                }
            }
        }
    post {
        // Clean after build
        cleanup {
            sh """
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@script
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@libs
                rm -rf $WORKSPACE/*
            """
            }
        }
    }
