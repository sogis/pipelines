def serviceName = 'qwc-service'
def repo = 'https://raw.githubusercontent.com/sogis/pipelines/master/api_webgisclient/' + serviceName
def namespace = 'gdi-devel'
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
credentials = [
    usernamePassword(credentialsId: 'agi-apps-test-github-secret'          , usernameVariable: 'githubUser'              , passwordVariable: 'githubPwd'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-ogc-server'          , usernameVariable: 'DbUserOgcServer'         , passwordVariable: 'PwdOgcServer'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-sogis-service'       , usernameVariable: 'DbUserSogisService'      , passwordVariable: 'PwdSogisService'),
    usernamePassword(credentialsId: 'agi-apps-test-gitlab-sourcepole'      , usernameVariable: 'gitlabUser'              , passwordVariable: 'gitlabPwd'),
    usernamePassword(credentialsId: 'agi-apps-test-gitlab-sourcepole-token', usernameVariable: 'gitlabTokenUser'         , passwordVariable: 'gitlabToken')
]
library identifier: 'jenkins-shared-libs@master', retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])

pipeline {
    agent any 
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 10, unit: 'MINUTES')
        }
    parameters {
        string(defaultValue: "v2.0.8",
               description: 'Bitte Basis Image Version ausw채hlen',
               name: 'vBaseImage'
               )
        string(defaultValue: "2.0.14",
               description: 'Bitte QWC Version ausw채hlen',
               name: 'qwcVersion'
               )
        string(description: 'Bitte Tag des generierten bzw. deployten Images angeben',
               name: 'vDeployImage'
               )
        string(defaultValue: "gdi-test",
               description: 'Bitte namespace ausw채hlen',
               name: 'namespace'
               )
        string(defaultValue: "release_so",
               description: 'Bitte Branch ausw채hlen',
               name: 'branch'
               )
        string(defaultValue: "geo-i.so.ch",
               description: "Matomo Url",
               name: 'analyticsUrl'
               )
        choice(choices: ['ja','nein'],
               description: 'Soll das Image gebaut werden?',
               name: 'build'     
               )
        }

    stages {
        stage ('Ask for Version') {
            steps {
                script {
                    vBaseImage = params.vBaseImage
                    vDeployImage = params.vDeployImage
                    build = params.build
                    qwcVersion = params.qwcVersion
                    namespace = params.namespace
                    analyticsUrl = params.analyticsUrl
                    branch = params.branch
                    }
                }
            }
        stage ('Configure Ressources') {
            steps {
                withCredentials ( credentials ) {
                    configureRessources '${namespace}', "-f ${repo}/resources.yaml -p DB_SERVER=${env.DB_SERVER_TEST} -p GEO_DB_SERVER=${env.GEO_DB_SERVER_TEST} -p DB_PUB=${env.PUB_DB} -p DB_EDIT=${env.EDIT_DB} -p DB_CONFIG=${env.CONFIG_DB} -p DB_OEREB=${env.OEREB_DB} -p DB_SOGIS=${env.SOGIS_DB} -p USER_OGC_SERVER=${DbUserOgcServer} -p PW_OGC_SERVER=${PwdOgcServer} -p USER_SOGIS_SERVICE=${DbUserSogisService} -p PW_SOGIS_SERVICE=${PwdSogisService} -p NAMESPACE=${namespace}"
                    }
                }
            }
        stage ('Build new Image for qwc-service if necessary') {
            when {
                expression {
                    (build == 'ja')
                    }
                }
            steps {
                withCredentials ( credentials ) {
                    buildImage serviceName, repo, namespace, "-p BRANCH=${branch}", "--build-arg GIT_VERSION=${vBaseImage} --build-arg QWC2_VERSION=${qwcVersion} --build-arg SERVICE_MOUNTPOINT=/map --build-arg SERVICE=qwc_service --build-arg ANALYTICS_URL=//${analyticsUrl}/analytics --env GIT_TOKEN=${gitlabToken} --env GIT_PASSWORD=${gitlabPwd}"
                    }
                }
            }
        stage ('Tag Image for qwc-service') {
            when {
                expression {
                    (build == 'ja')
                    }
                }    
            steps {
                tagImage serviceName, vDeployImage
                }
            }
        stage ('Deploy qwc-service in Test env') {
            steps {
                deployImage serviceName, namespace, vDeployImage, repo
                }
            }
        }
    }
