library identifier: "jenkins-shared-libs@${JENKINS_SHARED_LIBS_BRANCH}", retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])
credentials = [
    usernamePassword(credentialsId: 'jenkinsApi'                          , usernameVariable: 'apiUser'                 , passwordVariable: 'PwdApiUser'),
    ]
pipeline {
    agent { label 'master' } 
    options {
        // set a timeout of 15 minutes for this pipeline
        timeout(time: 20, unit: 'MINUTES')
        // disableConcurrentBuilds()
    }
    parameters {
        string(defaultValue: "gdi-integration",
               description: 'Bitte namespace auswählen',
               name: 'namespace'
              )
        string(defaultValue: '1',
               description: 'Anzahl der Replicas',
               name: 'replicas'
               )
        string(defaultValue: "master",
               description: 'Bitte Branch auswählen, der für die Pipeline verwendet werden soll',
               name: 'branch'
               )
        choice(choices: ['nein','ja'],
               description: 'Rollout der gesamten Applikation?',
               name: 'rolloutAll'
               )
        choice(choices: ['ja','nein'],
               description: 'Soll das Image gebaut werden?',
               name: 'build'
              )
        }
    stages {
        stage('Stop Old Build') {
            steps {
                milestone label: '', ordinal:  Integer.parseInt(env.BUILD_ID) - 1
                milestone label: '', ordinal:  Integer.parseInt(env.BUILD_ID)
                }
            }
        stage ('Ask for Version') {
            steps {
                script {
                    build = params.build
                    namespace = params.namespace
                    rolloutAll = params.rolloutAll
                    replicas = params.replicas
                    branch = params.branch
                    branch = params.branch
                    }
                }
            }
        stage('create configs') {
            agent { label 'config-generator-agent' }
            steps {
                script {
                    createConfigs namespace
                    }
                }
            post {
                unsuccessful {
                    sh """
                        rm -rf /srv/qwc_service/config /srv/qwc_service/legends $env.WORKSPACE/legends $env.WORKSPACE/config
                    """
                    }
                }
            } 
        stage('get requirements') {
            steps {
                script {    
                    serviceMap = [:]
                    workDir = "$JENKINS_HOME/jobs/$JOB_BASE_NAME/workspace/api_webgisclient"
                    dir (workDir) {
                        def req = readFile(file: 'requirements.txt')
                        def services = req.split('\n')
                        services.each { item ->
                            serviceNameBaseImage = item.split(':')[0]+'-baseImage'
                            serviceVersionBaseImage = item.split(':')[1]
                            serviceNameDeployImage = item.split(':')[0]+'-deployImage' 
                            serviceVersionDeployImage = item.split(':')[2]
                            serviceMap.put((serviceNameBaseImage), (serviceVersionBaseImage))
                            serviceMap.put((serviceNameDeployImage), (serviceVersionDeployImage))
                            }
                        }
                    }
                }
            }
        stage('Deploy Services') {
            parallel {
                 stage ('Deploy agdi') {
                    when {
                        expression { rolloutAll == 'ja' }
                    }
                    steps {
                        build job: 'agdi', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-agdi-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-agdi-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}") ], wait: true, propagate: true 
                        }
                     }
                 stage ('Deploy ccc-service') {
                    when {
                        expression { rolloutAll == 'ja' }
                    }
                    steps {
                        build job: 'ccc-config-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-ccc-config-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-ccc-config-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}") ], wait: true, propagate: true
                        }
                    }
                 stage ('Deploy auth-service') {
                    steps {
                        build job: 'auth-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-auth-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-auth-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}") ], wait: true, propagate: true
                        }
                    }
                 stage ('Deploy qwc-service') {
                    steps {
                        build job: 'qwc-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-map-viewer-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-map-viewer-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy qgis-server') {
                    steps {
                        build job: 'qgis-server', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-qgis-server-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-qgis-server-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy data-service') {
                    steps {
                        build job: 'data-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-data-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-data-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true
                        }
                    }
                stage ('Deploy dataproduct-service') {
                    steps {
                        build job: 'dataproduct-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-dataproduct-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-dataproduct-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy document-service') {
                    steps {
                        build job: 'document-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-document-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-document-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy elevation-service') {
                    steps {
                        build job: 'elevation-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-elevation-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-elevation-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy featureinfo-service') {
                    steps {
                        build job: 'featureinfo-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-feature-info-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-feature-info-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    } 
                stage ('Deploy jasper-reporting-service') {
                    when {
                        expression { rolloutAll == 'ja' }
                    }
                    steps {
                        build job: 'jasper-reporting-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['jasper-reporting-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['jasper-reporting-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy landreg-service') {
                    steps {
                        build job: 'landreg-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-landreg-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-landreg-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy legend-service') {
                    steps {
                        build job: 'legend-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-legend-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-legend-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy mapinfo-service') {
                    steps {
                        build job: 'mapinfo-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-mapinfo-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-mapinfo-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy ogc-service') {
                    steps {
                        build job: 'ogc-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-ogc-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-ogc-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy permalink-service') {
                    steps {
                        build job: 'permalink-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-permalink-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-permalink-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy plotinfo-service') {
                    steps {
                        build job: 'plotinfo-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['sogis-plotinfo-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['sogis-plotinfo-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy print-service') {
                    steps {
                        build job: 'print-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-print-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-print-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                stage ('Deploy search-service') {
                    steps {
                        build job: 'search-service', parameters: [ string(name: 'vDeployImage', value: "${serviceMap['qwc-fulltext-search-service-deployImage']}"), string(name: 'vBaseImage', value: "${serviceMap['qwc-fulltext-search-service-baseImage']}"), string(name: 'namespace', value: "${namespace}"), string(name: 'build', value: "${build}"), booleanParam(name: 'configs', value: true), string(name: 'jobName', value: "${JOB_NAME}"), string(name: 'buildNumber', value: "${BUILD_NUMBER}"), string(name: 'replicas', value: "${replicas}"), string(name: 'branch', value: "${branch}")  ], wait: true, propagate: true 
                        }
                    }
                } 
            }
        }
    post {
        // Clean after build
        cleanup {
            sh """
                echo $WORKSPACE
                set \\+e
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@script $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@libs $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@tmp $WORKSPACE/* $WORKSPACE/.git
            """
            }
        }
    }
