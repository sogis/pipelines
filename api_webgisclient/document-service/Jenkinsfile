def serviceName = 'document-service'
def repo = 'https://raw.githubusercontent.com/sogis/pipelines/master/api_webgisclient/' + serviceName
def namespace = 'gdi-devel'
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
credentials = [
    usernamePassword(credentialsId: 'agi-apps-test-github-secret'          , usernameVariable: 'githubUser'              , passwordVariable: 'githubPwd'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-ogc-server'          , usernameVariable: 'DbUserOgcServer'         , passwordVariable: 'PwdOgcServer'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-mswrite'             , usernameVariable: 'DbUserMswrite'           , passwordVariable: 'PwdMswrite'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-report-server'       , usernameVariable: 'DbUserReportServer'      , passwordVariable: 'PwdReportServer'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-sogis-service'       , usernameVariable: 'DbUserSogisService'      , passwordVariable: 'PwdSogisService'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-sogis-service-write' , usernameVariable: 'DbUserSogisServiceWrite' , passwordVariable: 'PwdSogisServiceWrite'),
    usernamePassword(credentialsId: 'agi-apps-test-gitlab-sourcepole'      , usernameVariable: 'gitlabUser'              , passwordVariable: 'gitlabPwd'),
    usernamePassword(credentialsId: 'agi-apps-test-gitlab-sourcepole-token', usernameVariable: 'gitlabTokenUser'         , passwordVariable: 'gitlabToken')
]
library identifier: 'jenkins-shared-libs@master', retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])

pipeline {
    agent any 
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 10, unit: 'MINUTES')
        }
    parameters {
        string(defaultValue: "2.0.8",
               description: 'Bitte Version ausw√§hlen',
               name: 'version'
               )
        choice(choices: ['ja','nein'],
               description: 'Soll das Image gebaut werden?',
               name: 'build'     
               )
        }

    stages {
        stage ('Ask for Version') {
            steps {
                script {
                    version = params.version
                    build = params.build
                    println version
                    }
                }
            }
        stage ('Configure Ressources') {
            steps {
                withCredentials (credentials ) {
                    configureRessources 'gdi-devel', "-f ${repo}/resources.yaml -p DB_SERVER=geodb-t.rootso.org -p PW_OGC_SERVER=${PwdOgcServer} -p GEO_DB_SERVER=geodb-t.verw.rootso.org -p PW_SOGIS_SERVICE=${PwdSogisService} -p PW_SOGIS_SERVICE_WRITE=${PwdSogisServiceWrite} -p NAMESPACE=${namespace}"
                    }
                }
            }
        stage ('Build new Image for document-service if necessary') {
            when {
                expression {
                    (build == 'ja')
                    }
                }
            steps {
                withCredentials ( credentials ) {
                    buildImage serviceName, repo, namespace, "--build-arg GIT_VERSION=v${version} --build-arg SERVICE_MOUNTPOINT=/api/v1/document --build-arg SERVICE=rest_services/document-service --env GIT_TOKEN=${gitlabToken} --env GIT_PASSWORD=${gitlabPwd}"
                    }
                }
            }
        stage ('Tag Image for document-service') {
            when {
                expression {
                    (build == 'ja')
                    }
                }    
            steps {
                tagImage serviceName, version
                }
            }
        stage ('Deploy document-service in Test env') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(namespace) {
                            def dcConfig = openshift.process( "${repo}/deploymentconfig.yaml", "-p", "NAMESPACE=${namespace}" )
                            deployImage serviceName, namespace, version, dcConfig
                            }
                        }
                    }
                }
            }
        }
    }
