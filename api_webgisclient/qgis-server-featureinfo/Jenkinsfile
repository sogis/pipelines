def serviceName = 'qgis-server-featureinfo'
def configFileName = 'somap.qgs'
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
library identifier: "jenkins-shared-libs@${JENKINS_SHARED_LIBS_BRANCH}", retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])

pipeline {
    agent { label 'master' }
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 35, unit: 'MINUTES')
        }
    parameters {
        string(description: 'Image Version',
               defaultValue: "3.28.7",
               name: 'vBaseImage'
               )
        string(defaultValue: "master",
               description: 'Bitte Branch auswählen, der für die Pipeline verwendet werden soll',
               name: 'branch'
               )
        string(description: 'Anzahl der Replicas GetMap QGIS Server',
               defaultValue: '1',
               name: 'replicas'
               )
        string(defaultValue: "gdi-production",
               description: 'Bitte namespace auswählen',
               name: 'namespace'
               )
        }

    stages {
        stage ('Ask for Version') {
            steps {
                script {
                    repo = 'https://raw.githubusercontent.com/sogis/pipelines/' + params.branch + '/api_webgisclient/' + serviceName + '/deployment'
                    vBaseImage = params.vBaseImage
                    namespace = params.namespace
                    if ( namespace == 'gdi-test' ) { 
                      db_server = env.DB_SERVER_TEST
                      environment = 'test'
                      sogisPicMirEnv = '-test'
                      replicas = '1'
                      resources = ['cpu_request': '0', 'cpu_limit': '1000m', 'memory_request': '0', 'memory_limit': '8192Mi']
                      }
                    else if ( namespace == 'gdi-integration' ) { 
                      db_server = env.DB_SERVER_INT
                      environment = 'integration'
                      sogisPicMirEnv = '-int'
                      replicas = '1'
                      resources = ['cpu_request': '250m', 'cpu_limit': '1000m', 'memory_request': '1024Mi', 'memory_limit': '2048Mi']
                      }
                    else if ( namespace == 'gdi-production' ) { 
                      db_server = env.DB_SERVER_PROD
                      environment = 'production'
                      sogisPicMirEnv = '-v2-prod'
                      replicas = '2'
                      resources = ['cpu_request': '1000m', 'cpu_limit': '1000m', 'memory_request': '2048Mi', 'memory_limit': '2500Mi']
                      }
                    else {
                      environment = 'test'
                      sogisPicMirEnv = '-test'
                      replicas = '1'
                      resources = ['cpu_request': '0', 'cpu_limit': '0', 'memory_request': '0', 'memory_limit': '0']
                      }
                    if (params.containsKey("configs")) {
                        buildNumber = params.buildNumber
                        jobName = params.jobName
                        }
                    else {
                        buildNumber = BUILD_NUMBER
                        jobName = JOB_NAME
                        }
                    credentials = [ 
                        usernamePassword(credentialsId: (env.OPENSHIFT_ENVIRONMENT) + '-jenkins-dbuser-ogc-server-secret', usernameVariable: 'DbUserOgcServer', passwordVariable: 'PwdOgcServer')
                        ]
                    }
                }
            }
        stage ('Configure Ressources') {
            steps {
                withCredentials ( credentials ) {
                    configureRessources '${namespace}', "-f ${repo}/resources.yaml"
                    }
                }
            }
        stage ('Deploy qgis-server-featureinfo') {
            steps {
                deployImage serviceName, namespace, vBaseImage, repo, replicas, resources['cpu_request'], resources['cpu_limit'], resources['memory_request'], resources['memory_limit'], "-p ENVIRONMENT=${sogisPicMirEnv}"
                }
            }
        }
    post {
        // Clean after build
        cleanup {
            sh """
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@script
                rm -rf $JENKINS_HOME/jobs/$JOB_NAME/workspace\\@libs
                rm -rf $WORKSPACE/*
            """
            }
        }
    }
