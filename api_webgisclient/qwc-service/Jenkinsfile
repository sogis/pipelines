def serviceName = 'qwc-service'
def repo = 'https://raw.githubusercontent.com/sogis/pipelines/master/api_webgisclient/' + serviceName
def version
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
credentials = [
    usernamePassword(credentialsId: 'agi-apps-test-github-secret'          , usernameVariable: 'githubUser'              , passwordVariable: 'githubPwd'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-ogc-server'          , usernameVariable: 'DbUserOgcServer'         , passwordVariable: 'PwdOgcServer'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-mswrite'             , usernameVariable: 'DbUserMswrite'           , passwordVariable: 'PwdMswrite'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-report-server'       , usernameVariable: 'DbUserReportServer'      , passwordVariable: 'PwdReportServer'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-sogis-service'       , usernameVariable: 'DbUserSogisService'      , passwordVariable: 'PwdSogisService'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-sogis-service-write' , usernameVariable: 'DbUserSogisServiceWrite' , passwordVariable: 'PwdSogisServiceWrite'),
    usernamePassword(credentialsId: 'agi-apps-test-gitlab-sourcepole'      , usernameVariable: 'gitlabUser'              , passwordVariable: 'gitlabPwd'),
    usernamePassword(credentialsId: 'agi-apps-test-gitlab-sourcepole-token', usernameVariable: 'gitlabTokenUser'         , passwordVariable: 'gitlabToken')
]
library identifier: 'jenkins-shared-libs@master', retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])
pipeline {
    agent any 
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 10, unit: 'MINUTES')
        }

    stages {
        stage ('Ask for Version') {
            steps {
                
                input {message 'Bitte Version angeben und ob das Image gebaut werden soll'
                       ok 'Start Pipeline'
                       parameters {booleanParam defaultValue: true, description: '', name: 'build'
                                   string defaultValue: 'none', description: '', name: 'version', trim: false
                        }
                    }
                //script {
                //    version = stagePreamble.call().version
                //    build = stagePreamble.call().build
                //    }
                }
            }
        stage ('Configure Ressources') {
            steps {
                script { 
                    configureRessources credentials, repo, 'gdi-devel' 
                    }
                }
            }
        stage ('Build new Image for qwc-service if necessary') {
            when {
                expression {
                    (build == 'ja')
                    }
                }
            steps {
                script {
                    buildImage 'qwc-service', version, repo
                    }
                }
            }
        stage ('Tag Image for qwc-service') {
            when {
                expression {
                    (build == 'ja')
                    }
                }    
            steps {
                script {
                    tagImage 'qwc-service', version
                    }
                }
            }
        stage ('Deploy qwc-service in Test env') {
            steps {
                script {
                    deployImage 'qwc-service', repo, 'gdi-devel'
                    }
                }
            }
        }
    }
