def serviceName = 'jasper-reporting-service'
def repo = 'https://raw.githubusercontent.com/sogis/pipelines/master/api_webgisclient/' + serviceName
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
credentials = [
    usernamePassword(credentialsId: 'agi-apps-test-pw-mswrite'             , usernameVariable: 'DbUserMswrite'           , passwordVariable: 'PwdMswrite'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-report-server'       , usernameVariable: 'DbUserReportServer'      , passwordVariable: 'PwdReportServer'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-sogis-service'       , usernameVariable: 'DbUserSogisService'      , passwordVariable: 'PwdSogisService'),
    usernamePassword(credentialsId: 'agi-apps-test-pw-imdas-db-user'       , usernameVariable: 'DbUserImdasDb'           , passwordVariable: 'PwdImdasUser'),
]
library identifier: 'jenkins-shared-libs@master', retriever: modernSCM(
    [$class: 'GitSCMSource',
     remote: 'https://github.com/sogis/jenkins-shared-libs.git'])

pipeline {
    agent { label 'master' } 
    options {
        // set a timeout of 10 minutes for this pipeline
        timeout(time: 10, unit: 'MINUTES')
        }
    parameters {
        string(defaultValue: "v2.0.8",
               description: 'Bitte Basis Image Version auswählen',
               name: 'vBaseImage'
               )
        string(description: 'Bitte Tag des generierten bzw. deployten Images angeben',
               name: 'vDeployImage'
               )
        string(defaultValue: "gdi-test",
               description: 'Bitte namespace auswählen',
               name: 'namespace'
               )
        choice(choices: ['ja','nein'],
               description: 'Soll das Image gebaut werden?',
               name: 'build'
               )
        }

    stages {
        stage ('Ask for Version') {
            steps {
                script {
                    vBaseImage = params.vBaseImage
                    vDeployImage = params.vDeployImage
                    namespace = params.namespace
                    build = params.build
                    if (params.containsKey("configs")) {
                        buildNumber = params.buildNumber
                        jobName = params.jobName
                        }
                    else {
                        buildNumber = BUILD_NUMBER
                        jobName = JOB_NAME
                        }
                    }
                }
            }
        stage ('Configure Ressources') {
            steps {
                withCredentials ( credentials ) {
                    configureRessources '${namespace}', "-f ${repo}/resources.yaml -p DB_SERVER=geodb-t.rootso.org -p GEO_DB_SERVER=geodb-t.verw.rootso.org -p IMDAS_DB_SERVER=srsofaioi18943.verw.rootso.org -p DB_PUB=${env.PUB_DB} -p DB_EDIT=${env.EDIT_DB} -p DB_CONFIG=${env.CONFIG_DB} -p DB_SOGIS=${env.SOGIS_DB} -p DB_IMDAS=${env.IMDAS_DB} -p USER_SOGIS_SERVICE=${DbUserSogisService} -p PW_SOGIS_SERVICE=${PwdSogisService} -p USER_REPORT_SERVER=${DbUserReportServer} -p PW_REPORT_SERVER=${PwdReportServer} -p USER_MSWRITE=${DbUserMswrite} -p PW_MSWRITE=${PwdMswrite} -p USER_IMDAS_DB=${DbUserImdasDb} -p PW_IMDAS_DB_USER=${PwdImdasUser} -p NAMESPACE=${namespace}"
                    }
                }
             }
        stage ('Build new Image for jasper-reporting-service if necessary') {
            when {
                expression {
                    (build == 'ja')
                    }
                }
            steps {
                script {
                    sh """   
                       oc process -f $repo/buildconfig.yaml -p BASETAG=${vBaseImage} -p DEPLOYTAG=${vDeployImage} | oc apply -n $namespace -f- 
                       oc start-build $serviceName -n $namespace --wait
                    """
                    }
                }
            }
        stage ( 'Deploy jasper-reporting-service' ) {
            steps {
                deployImage serviceName, namespace, vDeployImage, repo
                }
            }
        }
    }
